(defun char-map (c)
  (case c
    (#\Space 941)
    (#\! 18)
    (#\" 583)
    (#\# 2035)
    (#\$ 52)
    (#\% 913)
    (#\& 1126)
    (#\' 2920)
    (#\( 2288)
    (#\) 1954)
    (#\* 3412)
    (#\+ 1665)
    (#\, 1597)
    (#\- 3662)
    (#\. 3701)
    (#\/ 3601)
    (#\0 2123)
    (#\1 3828)
    (#\2 167)
    (#\3 2421)
    (#\4 2544)
    (#\5 504)
    (#\6 1589)
    (#\7 1887)
    (#\8 192)
    (#\9 3928)
    (#\: 1111)
    (#\; 243)
    (#\< 1101)
    (#\= 3131)
    (#\> 112)
    (#\? 2959)
    (#\@ 2208)
    (#\A 1805)
    (#\B 1772)
    (#\C 232)
    (#\D 3998)
    (#\E 2534)
    (#\F 1609)
    (#\G 1024)
    (#\H 3721)
    (#\I 1832)
    (#\J 241)
    (#\K 2213)
    (#\L 2917)
    (#\M 3199)
    (#\N 1415)
    (#\O 3242)
    (#\P 561)
    (#\Q 1038)
    (#\R 3934)
    (#\S 278)
    (#\T 3257)
    (#\U 753)
    (#\V 2724)
    (#\W 128)
    (#\X 572)
    (#\Y 332)
    (#\Z 3536)
    (#\[ 1856)
    (#\\ 2018)
    (#\] 2291)
    (#\^ 284)
    (#\_ 2692)
    (#\` 71)
    (#\a 2642)
    (#\b 1340)
    (#\c 3238)
    (#\d 1939)
    (#\e 2491)
    (#\f 2605)
    (#\g 3092)
    (#\h 2029)
    (#\i 3768)
    (#\j 3112)
    (#\k 2053)
    (#\l 3875)
    (#\m 3434)
    (#\n 2820)
    (#\o 3107)
    (#\p 3932)
    (#\q 910)
    (#\r 3218)
    (#\s 1426)
    (#\t 1661)
    (#\u 3311)
    (#\v 3303)
    (#\w 2016)
    (#\x 366)
    (#\y 1304)
    (#\z 3644)
    (#\{ 1078)
    (#\| 3226)
    (#\} 3025)
    (#\~ 1684)
    (otherwise 0)))

(defun gen-key-h (s)
  (let* (
         (s1 (reverse s))
         (s2 (map 'list (lambda (i) (+ (* -4 i i) (* 7 i) -2)) s1))
         (s3 (map 'list (lambda (i) (elt s2 i))
                  '(46 28 40 39 2 27 18 23 31 16 29 48 38 12 35 42 32 49 19 21 14 3 34 5 30 13 4 7 25 22 8 11 50 47 41 15 1 36 33 17 10 37 0 43 44 26 45 20 24 6 51 9)))
         (s4 (map 'list '+ s3 (append (cdr s3) (list (car s3)))))
         (s5 s4)
         (s6 s5)
         (s7 (map 'list (lambda (i) (elt s6 i))
                  '(18 31 4 13 39 36 3 19 1 8 22 16 5 30 23 0 7 48 46 20 26 6 24 10 41 49 9 34 2 12 37 28 51 50 15 47 40 32 27 42 33 35 25 43 11 45 38 29 17 44 21 14)))
         (s8 (map 'list (lambda (x) (* x x x)) s7))
         (s9 (map 'list #'abs s8))
         (s10 (map 'list #'logxor s9 (append (cdr s9) (list (car s9)))))
         (s11 (map 'list #'isqrt s10))
         (s12 (map 'list (lambda (x) (* x x x)) s11))
         (s13 s12)
         (s14 (map 'list '- s13 s2))
         (s15 (map 'list #'abs s14))
         (s16 (map 'list (lambda (x) (logand x 4095)) s15)))
    s16))

(defun gen-key (s)
  (loop for i from 1 to 512 do (setq s (gen-key-h s)))
  s)

(defun verify-flag (f)
  (cond
    ((= (length f) 52)
     (let* ((l (map 'list #'char-map f))
            (k (gen-key (loop for i from 1 to 52 collect (* i i))))
            (r (map 'list #'logxor l k))
            (c '(3472 2481 3691 2476 650 3021 260 3972 3888 2025 637 1853 1481 2679 2459 35 706 669
                 2794 2383 3041 3855 2203 1178 577 1942 1417 2513 111 1888 3977 933 1399 2705 1902
                 3481 3474 3 1349 199 297 1481 3230 1253 3062 1853 246 6 3097 849 4071 2000)))
       (cond ((equal r c) "Valid")
             (t "Invalid"))))
    (t "Invalid")))
